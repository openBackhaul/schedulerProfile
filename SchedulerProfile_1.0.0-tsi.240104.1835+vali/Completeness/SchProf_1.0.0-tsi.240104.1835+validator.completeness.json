{
	"info": {
		"_postman_id": "bcecd2b8-3a19-4a7e-a47d-d226a2a766b7",
		"name": "SchedulerProfile_1.0.0-tsi.240104.1835+validator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== SchedulerProfile_1.0.0-tsi.240104.1835+validator ===================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // uuid of the object that is to be validated\r",
									"    // localId of the object that is to be validated\r",
									"    // kindOfReference : 'dynamic' for testing against implementations, 'static' for testing against simulators\r",
									"    // suffixUrlEncodingIsRequired : e.g. Mockoon requires the suffix being url encoded, but applications vice versa\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "SchedulerProfile",
					"item": [
						{
							"name": "profile-collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var schedulerProfileUuid = \"\";\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let profileName;\r",
											"            profileName = \"scheduler-profile-1-0:PROFILE_NAME_TYPE_SCHEDULER_PROFILE\";\r",
											"            schedulerProfileUuid = FindUuidForProfileType(responseObject, profileName);\r",
											"\r",
											"        } else {\r",
											"            pm.test(\"List of Profile instances could be loaded\", function () {\r",
											"                pm.expect(false).to.be.true\r",
											"            });\r",
											"            logger.log(\"FAIL: List of Profile instances could not be loaded\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"        if ( schedulerProfileUuid != \"\" ) {\r",
											"            logger.log(\"  - schedulerProfileUuid: \" + schedulerProfileUuid)\r",
											"        } else {\r",
											"            logger.log(\"  - No instance of SchedulerProfile found\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"schedulerProfileUuid\", schedulerProfileUuid);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function FindUuidForProfileType(responseObject, searchedProfileType) {\r",
											"    for(let i=0; i<responseObject[\"core-model-1-4:profile-collection\"][\"profile\"].length; i++) {\r",
											"        let profileName;\r",
											"        try {\r",
											"            profileName = responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"profile-name\"]\r",
											"        } catch (error) {\r",
											"            profileName = \"\"\r",
											"        }\r",
											"        if( profileName == searchedProfileType ) {\r",
											"            return responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"uuid\"]\r",
											"        }\r",
											"    }\r",
											"    return \"\"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ProfileCollection ===================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"?fields=profile(uuid;profile-name)\";\r",
											"    filters = UrlEncodeFieldsFilterString(filters);\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/profile-collection\";\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( mountName != \"\" ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters;\r",
											"\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeFieldsFilterString(filters) {\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \"(\", \"%28\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \")\", \"%29\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \":\", \"%3A\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \";\", \"%3B\");\r",
											"    return filters\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "scheduler-profile-capability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var schedulerProfileCapability = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            schedulerProfileCapability = responseObject[\"scheduler-profile-1-0:scheduler-profile-capability\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"scheduler-profile-1-0:scheduler-profile-capability\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"scheduler-profile-1-0:scheduler-profile-capability\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"scheduler-kind-configuration-is-avail\",\r",
											"                    \"available-queue-list\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"scheduler-kind-configuration-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"available-queue-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 1,\r",
											"                        \"maxItems\": 8,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"queue-name\",\r",
											"                                \"available-scheduling-kind-list\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"queue-name\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"available-scheduling-kind-list\": {\r",
											"                                    \"type\": \"array\",\r",
											"                                    \"minItems\": 1,\r",
											"                                    \"items\": {\r",
											"                                        \"type\": \"string\",\r",
											"                                        \"enum\": [\r",
											"                                            \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_STRICT\",\r",
											"                                            \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\",\r",
											"                                            \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WRR\",\r",
											"                                            \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_DWRR\",\r",
											"                                            \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"\r",
											"                                        ]\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"SchedulerProfileCapability could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: SchedulerProfileCapability could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: SchedulerProfileCapability could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"schedulerProfileCapability\", schedulerProfileCapability)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== SchedulerProfileCapability ==========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var schedulerProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    schedulerProfileUuid = pm.collectionVariables.get(\"schedulerProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/scheduler-profile-1-0:scheduler-profile-pac/scheduler-profile-capability\";\r",
											"    uuid = schedulerProfileUuid;\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (schedulerProfileUuid!=\"\") && (schedulerProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "scheduler-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var schedulerProfileConfiguration = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            schedulerProfileConfiguration = responseObject[\"scheduler-profile-1-0:scheduler-profile-configuration\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"scheduler-profile-1-0:scheduler-profile-configuration\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"scheduler-profile-1-0:scheduler-profile-configuration\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"queue-behavior-list\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"queue-behavior-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 1,\r",
											"                        \"maxItems\": 8,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"queue-name\",\r",
											"                                \"scheduler-kind\",\r",
											"                                \"weighting\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"queue-name\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",\r",
											"                                        \"scheduler-profile-1-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"scheduler-kind\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_STRICT\",\r",
											"                                        \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\",\r",
											"                                        \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WRR\",\r",
											"                                        \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_DWRR\",\r",
											"                                        \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"weighting\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"SchedulerProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: SchedulerProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: SchedulerProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"schedulerProfileConfiguration\", schedulerProfileConfiguration)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== SchedulerProfileConfiguration =======================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var schedulerProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    schedulerProfileUuid = pm.collectionVariables.get(\"schedulerProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/scheduler-profile-1-0:scheduler-profile-pac/scheduler-profile-configuration\";\r",
											"    uuid = schedulerProfileUuid;\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (schedulerProfileUuid!=\"\") && (schedulerProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create-scheduler-profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== CreateSchedulerProfile ==============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var schedulerProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    schedulerProfileUuid = pm.collectionVariables.get(\"schedulerProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var creationInput = {};\r",
											"try {\r",
											"    if ( (schedulerProfileUuid!=\"\") && (schedulerProfileUuid!=undefined) ) {\r",
											"        creationInput.baseSchedulerProfile = schedulerProfileUuid;\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Random body could not be created.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"creationInput\", creationInput);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/scheduler-profile-1-0:create-scheduler-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( mountName != \"\" )  {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"    if ( (schedulerProfileUuid!=\"\") && (schedulerProfileUuid!=undefined) ) {\r",
											"        requestBody += '\"base-scheduler-profile\": \"' + creationInput.baseSchedulerProfile + '\"';\r",
											"    };\r",
											"    requestBody = requestBody\r",
											"        +       ' }'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var createdSchedulerProfileUuid = \"\";\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            createdSchedulerProfileUuid = responseObject[\"scheduler-profile-1-0:output\"][\"created-scheduler-profile\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"scheduler-profile-1-0:output\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"scheduler-profile-1-0:output\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"created-scheduler-profile\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"created-scheduler-profile\": {\r",
											"                        \"type\": \"string\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"CreateSchedulerProfile RPC responded 200\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: CreateSchedulerProfile RPC responded 200\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ResponseCode of CreateSchedulerProfile RPC responded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"createdSchedulerProfileUuid\", createdSchedulerProfileUuid);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "scheduler-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var replicatedQueueBehaviorList = [];\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    let replicatedSchedulerProfileConfiguration;\r",
											"    replicatedSchedulerProfileConfiguration = pm.collectionVariables.get(\"schedulerProfileConfiguration\");\r",
											"    replicatedQueueBehaviorList = replicatedSchedulerProfileConfiguration[\"queue-behavior-list\"]\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var createdQueueBehaviorList = [];\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            createdQueueBehaviorList = responseObject[\"scheduler-profile-1-0:scheduler-profile-configuration\"][\"queue-behavior-list\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"SchedulerProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: SchedulerProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: SchedulerProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        };\r",
											"\r",
											"        let createdIsIdenticalWithReplicated = false;\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            if ( createdQueueBehaviorList.length == replicatedQueueBehaviorList.length ) {\r",
											"                for ( let i=0; i<createdQueueBehaviorList.length; i++ ) {\r",
											"                    if ( createdQueueBehaviorList[i][\"queue-name\"] == replicatedQueueBehaviorList[i][\"queue-name\"]\r",
											"                            && createdQueueBehaviorList[i][\"scheduler-kind\"] == replicatedQueueBehaviorList[i][\"scheduler-kind\"]\r",
											"                            && createdQueueBehaviorList[i][\"weighting\"] == replicatedQueueBehaviorList[i][\"weighting\"] ) {\r",
											"                        createdIsIdenticalWithReplicated = true\r",
											"                    } else {\r",
											"                        createdIsIdenticalWithReplicated = false;\r",
											"                        break\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        };\r",
											"        pm.test(\"Created is identical with Replicated Scheduler Profile\", function () {\r",
											"            pm.expect(createdIsIdenticalWithReplicated).to.be.true\r",
											"        });\r",
											"        if ( createdIsIdenticalWithReplicated == true ) {\r",
											"            logger.log(\"  - ok: Created is identical with Replicated Scheduler Profile\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: Created is not identical with Replicated Scheduler Profile\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"createdQueueBehaviorList\", createdQueueBehaviorList)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== SchedulerProfileConfiguration =======================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdSchedulerProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdSchedulerProfileUuid = pm.collectionVariables.get(\"createdSchedulerProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/scheduler-profile-1-0:scheduler-profile-pac/scheduler-profile-configuration\";\r",
											"    if ( (createdSchedulerProfileUuid!=\"\") && (createdSchedulerProfileUuid!=undefined) ) {\r",
											"        switch ( collectionInfo.kindOfReference ) {\r",
											"            case \"dynamic\":\r",
											"                uuid = createdSchedulerProfileUuid;\r",
											"                break;\r",
											"\r",
											"            case \"static\":\r",
											"                uuid = createdSchedulerProfileUuid + \"a\";\r",
											"                break;\r",
											"\r",
											"            default:\r",
											"                logger.warn(\"Kind of reference (static/dynamic) unknown.\");\r",
											"                uuid = createdSchedulerProfileUuid\r",
											"\r",
											"        }\r",
											"    }\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdSchedulerProfileUuid!=\"\") && (createdSchedulerProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "modify-scheduler-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"ModifySchedulerProfile RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: ModifySchedulerProfile RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ModifySchedulerProfile RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ModifySchedulerProfile ==============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var schedulerKindConfigurationIsAvail = false;\r",
											"var firstQueueName = \"\";\r",
											"var availableSchedulersInFirstQueue = [];\r",
											"var createdSchedulerProfileUuid = \"\";\r",
											"var createdQueueBehaviorList = [];\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let schedulerProfileCapability;\r",
											"    schedulerProfileCapability = pm.collectionVariables.get(\"schedulerProfileCapability\");\r",
											"    schedulerKindConfigurationIsAvail = schedulerProfileCapability[\"scheduler-kind-configuration-is-avail\"];\r",
											"    firstQueueName = schedulerProfileCapability[\"available-queue-list\"][0][\"queue-name\"];\r",
											"    availableSchedulersInFirstQueue = schedulerProfileCapability[\"available-queue-list\"][0][\"available-scheduling-kind-list\"];\r",
											"\r",
											"    createdSchedulerProfileUuid = pm.collectionVariables.get(\"createdSchedulerProfileUuid\");\r",
											"\r",
											"    createdQueueBehaviorList = pm.collectionVariables.get(\"createdQueueBehaviorList\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var modificationInput = {};\r",
											"try {\r",
											"    switch ( collectionInfo.kindOfReference ) {\r",
											"        case \"dynamic\":\r",
											"            if ( (schedulerKindConfigurationIsAvail==true) && (availableSchedulersInFirstQueue.length>1) ) {\r",
											"                for ( let i=0; i<createdQueueBehaviorList.length; i++ ) {\r",
											"                    if ( createdQueueBehaviorList[i][\"queue-name\"] == firstQueueName ) {\r",
											"                        let currentScheduler;\r",
											"                        currentScheduler = createdQueueBehaviorList[i][\"scheduler-kind\"];\r",
											"                        let index;\r",
											"                        index = availableSchedulersInFirstQueue.indexOf(currentScheduler);\r",
											"                        if (index>-1) availableSchedulersInFirstQueue.splice(index, 1);\r",
											"                        createdQueueBehaviorList[i][\"scheduler-kind\"] = availableSchedulersInFirstQueue[0];\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"\r",
											"            let numberOfWeightedQueues = 0;\r",
											"            for ( let i=0; i<createdQueueBehaviorList.length; i++ ) {\r",
											"                if ( (createdQueueBehaviorList[i][\"scheduler-kind\"]==\"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\") \r",
											"                        || (createdQueueBehaviorList[i][\"scheduler-kind\"]==\"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WRR\")\r",
											"                        || (createdQueueBehaviorList[i][\"scheduler-kind\"]==\"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_DWRR\") ) {\r",
											"                    numberOfWeightedQueues++\r",
											"                }\r",
											"            };\r",
											"            let queue = 0;\r",
											"            for ( let i=0; i<createdQueueBehaviorList.length; i++ ) {\r",
											"                if ( (createdQueueBehaviorList[i][\"scheduler-kind\"]==\"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\") \r",
											"                        || (createdQueueBehaviorList[i][\"scheduler-kind\"]==\"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WRR\")\r",
											"                        || (createdQueueBehaviorList[i][\"scheduler-kind\"]==\"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_DWRR\") ) {\r",
											"                    queue++;\r",
											"                    if ( queue < numberOfWeightedQueues ) {\r",
											"                        createdQueueBehaviorList[i][\"weighting\"] = Math.floor(100/numberOfWeightedQueues)\r",
											"                    } else {\r",
											"                        createdQueueBehaviorList[i][\"weighting\"] = Math.floor(100/numberOfWeightedQueues) + 100%numberOfWeightedQueues\r",
											"                    };\r",
											"                }\r",
											"            }\r",
											"\r",
											"            modificationInput.existingSchedulerProfile = createdSchedulerProfileUuid;\r",
											"            modificationInput.affectedQueueList = createdQueueBehaviorList;\r",
											"            break;\r",
											"\r",
											"        case \"static\":\r",
											"            modificationInput.existingSchedulerProfile = createdSchedulerProfileUuid;\r",
											"            let affectedQueueList = [];\r",
											"            modificationInput.affectedQueueList = affectedQueueList;\r",
											"            for ( let i=0; i<8; i++ ) {\r",
											"                let instanceOfQueue = {};\r",
											"                instanceOfQueue[\"queue-name\"] = \"\";\r",
											"                instanceOfQueue[\"scheduler-kind\"] = \"\";\r",
											"                instanceOfQueue[\"weighting\"] = -1;\r",
											"                modificationInput.affectedQueueList[i] = instanceOfQueue\r",
											"            }\r",
											"            modificationInput.affectedQueueList[0][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\";\r",
											"            modificationInput.affectedQueueList[0][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\";\r",
											"            modificationInput.affectedQueueList[0][\"weighting\"] = 1;\r",
											"            modificationInput.affectedQueueList[1][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\";\r",
											"            modificationInput.affectedQueueList[1][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\";\r",
											"            modificationInput.affectedQueueList[1][\"weighting\"] = 4;\r",
											"            modificationInput.affectedQueueList[2][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\";\r",
											"            modificationInput.affectedQueueList[2][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\";\r",
											"            modificationInput.affectedQueueList[2][\"weighting\"] = 10;\r",
											"            modificationInput.affectedQueueList[3][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\";\r",
											"            modificationInput.affectedQueueList[3][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\";\r",
											"            modificationInput.affectedQueueList[3][\"weighting\"] = 15;\r",
											"            modificationInput.affectedQueueList[4][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\";\r",
											"            modificationInput.affectedQueueList[4][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\";\r",
											"            modificationInput.affectedQueueList[4][\"weighting\"] = 25;\r",
											"            modificationInput.affectedQueueList[5][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\";\r",
											"            modificationInput.affectedQueueList[5][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_WFQ\";\r",
											"            modificationInput.affectedQueueList[5][\"weighting\"] = 45;\r",
											"            modificationInput.affectedQueueList[6][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\";\r",
											"            modificationInput.affectedQueueList[6][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_STRICT\";\r",
											"            modificationInput.affectedQueueList[6][\"weighting\"] = -1;\r",
											"            modificationInput.affectedQueueList[7][\"queue-name\"] = \"scheduler-profile-1-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\";\r",
											"            modificationInput.affectedQueueList[7][\"scheduler-kind\"] = \"scheduler-profile-1-0:SCHEDULER_KIND_TYPE_STRICT\";\r",
											"            modificationInput.affectedQueueList[7][\"weighting\"] = -1;\r",
											"            break;\r",
											"\r",
											"        default:\r",
											"            logger.warn(\"Kind of reference (static/dynamic) unknown.\")\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Random body could not be created.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"modifiedQueueBehaviorList\", modificationInput.affectedQueueList);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/scheduler-profile-1-0:modify-scheduler-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdSchedulerProfileUuid!=\"\") && (createdSchedulerProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"existing-scheduler-profile\": \"' + modificationInput.existingSchedulerProfile + '\", '\r",
											"        +           '\"affected-queue-list\": ' + JSON.stringify(modificationInput.affectedQueueList)\r",
											"        +       ' }'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "scheduler-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var modifiedQueueBehaviorList = [];\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    modifiedQueueBehaviorList = pm.collectionVariables.get(\"modifiedQueueBehaviorList\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var storedQueueBehaviorList = [];\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            storedQueueBehaviorList = responseObject[\"scheduler-profile-1-0:scheduler-profile-configuration\"][\"queue-behavior-list\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"SchedulerProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: SchedulerProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: SchedulerProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        };\r",
											"\r",
											"        let storedIsIdenticalWithModified = false;\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            if ( storedQueueBehaviorList.length == modifiedQueueBehaviorList.length ) {\r",
											"                for ( let i=0; i<storedQueueBehaviorList.length; i++ ) {\r",
											"                    if ( storedQueueBehaviorList[i][\"queue-name\"] == modifiedQueueBehaviorList[i][\"queue-name\"]\r",
											"                            && storedQueueBehaviorList[i][\"scheduler-kind\"] == modifiedQueueBehaviorList[i][\"scheduler-kind\"]\r",
											"                            && storedQueueBehaviorList[i][\"weighting\"] == modifiedQueueBehaviorList[i][\"weighting\"] ) {\r",
											"                        storedIsIdenticalWithModified = true\r",
											"                    } else {\r",
											"                        storedIsIdenticalWithModified = false;\r",
											"                        break\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        };\r",
											"        pm.test(\"Stored is identical with Modified Scheduler Profile\", function () {\r",
											"            pm.expect(storedIsIdenticalWithModified).to.be.true\r",
											"        });\r",
											"        if ( storedIsIdenticalWithModified == true ) {\r",
											"            logger.log(\"  - ok: Stored is identical with Modified Scheduler Profile\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: Stored is identical with Modified Scheduler Profile\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== SchedulerProfileConfiguration =======================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdSchedulerProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdSchedulerProfileUuid = pm.collectionVariables.get(\"createdSchedulerProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/scheduler-profile-1-0:scheduler-profile-pac/scheduler-profile-configuration\";\r",
											"    if ( (createdSchedulerProfileUuid!=\"\") && (createdSchedulerProfileUuid!=undefined) ) {\r",
											"        switch ( collectionInfo.kindOfReference ) {\r",
											"            case \"dynamic\":\r",
											"                uuid = createdSchedulerProfileUuid;\r",
											"                break;\r",
											"\r",
											"            case \"static\":\r",
											"                uuid = createdSchedulerProfileUuid + \"b\";\r",
											"                break;\r",
											"\r",
											"            default:\r",
											"                logger.warn(\"Kind of reference (static/dynamic) unknown.\");\r",
											"                uuid = createdSchedulerProfileUuid\r",
											"\r",
											"        }\r",
											"    }\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdSchedulerProfileUuid!=\"\") && (createdSchedulerProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-scheduler-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"DeleteSchedulerProfile RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: DeleteSchedulerProfile RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: DeleteSchedulerProfile RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== DeleteSchedulerProfile ==============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdSchedulerProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"SchedulerProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdSchedulerProfileUuid = pm.collectionVariables.get(\"createdSchedulerProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/scheduler-profile-1-0:delete-scheduler-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdSchedulerProfileUuid!=\"\") && (createdSchedulerProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"obsolete-scheduler-profile\": \"' + createdSchedulerProfileUuid + '\" '\r",
											"        +       '} '\r",
											"        +   '}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}